
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ##The following pair of functions are used to create an object to store a matrix and caches its inverse.
> 
> ##Function 1 creates a special matrix object that can cache its inverse.
> 
> makeCacheMatrix<-function(x=matrix()){
+ inv<-NULL
+ set<-function(y){
+ x<<-y
+ inv<<-NULL
+ }
+ get<-function()x
+ setInverse<-function(inverse)inv<<-inverse
+ getInverse<-function()inv
+ list(set=set,
+ get=get,
+ setInverse=setInverse,
+ getInverse=getInverse)
+ }
> 
> ##Function 2 computes the inverse of the above matrix.It should retrieve the inverse from the cache, if the inverse has already been calculated.
> 
> cacheSolve<-function(x,...){
+ ##Return a matrix that is the inverse of 'x'
+ inv<-x$getInverse()
+ if(!is.null(inv)){
+ message("getting cached data")
+ return(inv)
+ }
+ mat<-x$get()
+ inv<-solve(mat,...)
+ x$setInverse(inv)
+ inv
+ }
> 
> 
